// Code generated by MockGen. DO NOT EDIT.
// Source: ./services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIServices is a mock of IServices interface.
type MockIServices struct {
	ctrl     *gomock.Controller
	recorder *MockIServicesMockRecorder
}

// MockIServicesMockRecorder is the mock recorder for MockIServices.
type MockIServicesMockRecorder struct {
	mock *MockIServices
}

// NewMockIServices creates a new mock instance.
func NewMockIServices(ctrl *gomock.Controller) *MockIServices {
	mock := &MockIServices{ctrl: ctrl}
	mock.recorder = &MockIServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServices) EXPECT() *MockIServicesMockRecorder {
	return m.recorder
}

// GetListEvents mocks base method.
func (m *MockIServices) GetListEvents(startDate, endDate string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListEvents", startDate, endDate)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListEvents indicates an expected call of GetListEvents.
func (mr *MockIServicesMockRecorder) GetListEvents(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListEvents", reflect.TypeOf((*MockIServices)(nil).GetListEvents), startDate, endDate)
}

// LoginTalenta mocks base method.
func (m *MockIServices) LoginTalenta() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginTalenta")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginTalenta indicates an expected call of LoginTalenta.
func (mr *MockIServicesMockRecorder) LoginTalenta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginTalenta", reflect.TypeOf((*MockIServices)(nil).LoginTalenta))
}

// PresentTalenta mocks base method.
func (m *MockIServices) PresentTalenta(token, status string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentTalenta", token, status)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentTalenta indicates an expected call of PresentTalenta.
func (mr *MockIServicesMockRecorder) PresentTalenta(token, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentTalenta", reflect.TypeOf((*MockIServices)(nil).PresentTalenta), token, status)
}
